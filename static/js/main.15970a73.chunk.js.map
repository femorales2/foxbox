{"version":3,"sources":["functions/combinations.js","App.js","reportWebVitals.js","index.js"],"names":["combinations","pivot","wordsLeft","length","recursiveArrayHandler","reduce","accumulatedWords","currentWord","combinedLastWithNewOne","push","concat","App","useState","ngram","setNgram","console","log","className","type","onChange","event","text","target","value","endsWith","slice","split","map","word","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAOe,SAASA,EAAaC,GAAsB,IAAD,uBAAXC,EAAW,iCAAXA,EAAW,kBACzD,GAAGA,EAAUC,OAAQ,CAEpB,IAAIC,EAAwBF,EAAUG,QAAO,SAACC,EAAkBC,GAC/D,IAAIC,EAAyBF,EAAiBA,EAAiBH,OAAS,GAA3C,WAAoDI,GAIjF,OAFAD,EAAiBG,KAAKD,GAEfF,IAEN,CAACL,IAEH,OAAOG,EAAsBM,OAAOV,EAAY,WAAZ,EAAgBE,IAIpD,MAAO,CAACD,G,WCeKU,MAlCf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,KAcb,OADAC,QAAQC,IAAIH,GAEV,sBAAKI,UAAU,MAAf,UACE,qDAGA,uBAAOC,KAAK,OAAOC,SAfG,SAACC,GACzB,IAAIC,EAAOD,EAAME,OAAOC,MAGpBF,EAAKG,SAAS,OAChBH,EAAOA,EAAKI,MAAM,GAAI,IAExBX,EAASd,EAAY,WAAZ,cAAgBqB,EAAKK,MAAM,WAUlC,sBAAKT,UAAU,QAAf,UACGJ,EAAMV,OAAS,IAAM,GACrBU,EAAMV,OACLU,EAAMc,KAAI,SAACC,EAAMC,GACf,OAAO,8BAAgBD,EAAhB,MAAQC,MACZ,GAENhB,EAAMV,OAAS,IAAM,UCpBf2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.15970a73.chunk.js","sourcesContent":["/**\n * we take the first word of the sentences and the rest will be in wordsLeft\n * @param pivot\n * @param wordsLeft\n * @returns {*[]|*}\n */\n\nexport default function combinations(pivot, ...wordsLeft) {\n\tif(wordsLeft.length) {\n\n\t\tlet recursiveArrayHandler = wordsLeft.reduce((accumulatedWords, currentWord) => {\n\t\t\tlet combinedLastWithNewOne = accumulatedWords[accumulatedWords.length - 1] + ` ${currentWord}`;\n\n\t\t\taccumulatedWords.push(combinedLastWithNewOne);\n\n\t\t\treturn accumulatedWords;\n\n\t\t},[pivot]); // initialized with the pivot word\n\n\t\treturn recursiveArrayHandler.concat(combinations(...wordsLeft));\n\n\t} else {\n\n\t\treturn [pivot];\n\n\t}\n\n}\n","import './App.css';\nimport combinations from \"./functions/combinations\";\nimport {useState} from \"react\";\n\nfunction App() {\n\n  const [ngram, setNgram] = useState([]);\n\n  const handleInputChange = (event) => {\n    let text = event.target.value;\n\n    // if ends with white space remove it!\n    if (text.endsWith(\" \"))\n      text = text.slice(0, -1);\n\n    setNgram(combinations(...text.split(\" \")));\n  };\n  console.log(ngram);\n  return (\n    <div className=\"App\">\n      <label>\n        write a sentence\n      </label>\n      <input type=\"text\" onChange={handleInputChange} />\n\n      <div className=\"ngram\">\n        {ngram.length ? \"[\" : \"\"}\n        {ngram.length ?\n          ngram.map((word, index) => {\n            return <p key={index}>{word},</p>;\n          }) : \"\"\n        }\n        {ngram.length ? \"]\" : \"\"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}